homr = !(grepl("1",y))
homa = !(grepl("0",y))
idx <- which(c(het,homr,homa)==TRUE)
geno[idx]
}))
})
joint@info$AC
joint@info$AC@unlistData
length(joint@info$AC@unlistData)
joint@info$AC
length(joint@info$AC)
sapply(joint@info$AC,length)
summary(sapply(joint@info$AC,length))
which(sapply(joint@info$AC,length)>1)
joint@info$AC[[296]]
joint@info[296,]
joint@assays$data[296,]
joint@assays$data@listData$GT[296,]
which(sapply(joint@info$AC,length)>1)
summary(sapply(joint@info$AC,length))
joint@assays$data@listData$GT[296,]
joint@info[296,]
joint@fixed[296,]
geno_type <- apply(joint@assays$data@listData$GT[is_any_na==0,],1,function(x){
unlist(sapply(x, function(y){
al = strsplit(y,"/")
het = al[1] == al[2]
homa = !(grepl("0",y))
homr = !het & !homa
idx <- which(c(het,homr,homa)==TRUE)
geno[idx]
}))
})
geno_type <- apply(joint@assays$data@listData$GT[is_any_na==0,],1,function(x){
unlist(sapply(x, function(y){
al = unlist(strsplit(y,"/"))
het = al[1] == al[2]
homa = !(grepl("0",y))
homr = !het & !homa
idx <- which(c(het,homr,homa)==TRUE)
geno[idx]
}))
})
geno_table <- do.call(rbind,geno_type)
head(geno_type)
geno_type <- apply(joint@assays$data@listData$GT[is_any_na==0,],1,function(x){
unlist(sapply(x, function(y){
al = unlist(strsplit(y,"/"))
het = al[1] == al[2]
homa = !(grepl("0",y))
homr = !het & !homa
idx <- which(c(het,homr,homa)==TRUE)
geno[idx]
}))
})
geno_table <- do.call(rbind,geno_type)
head(geno_type)
geno_type <- apply(joint@assays$data@listData$GT[is_any_na==0,],1,function(x){
unlist(sapply(x, function(y){
al = unlist(strsplit(y,"/"))
het = al[1] != al[2]
homa = !(grepl("0",y)) & al[1] == al[2]
homr = !het & !homa
idx <- which(c(het,homr,homa)==TRUE)
geno[idx]
}))
})
geno_table <- do.call(rbind,geno_type)
head(geno_type)
geno_type <- apply(joint@assays$data@listData$GT[is_any_na==0,],1,function(x){
unlist(sapply(x, function(y){
al = unlist(strsplit(y,"/"))
het = al[1] != al[2]
homa = !(grepl("0",y)) & !(het)
homr = !het & !homa
idx <- which(c(het,homr,homa)==TRUE)
geno[idx]
}))
})
geno_table <- do.call(rbind,geno_type)
head(geno_type)
geno_type <- apply(joint@assays$data@listData$GT[is_any_na==0,],1,function(x){
unlist(sapply(x, function(y){
al = unlist(strsplit(y,"/"))
het = al[1]!=al[2]
homa = !(grepl("0",y)) & !(het)
homr = !het & !homa
print(c(het,homr,homa))
idx <- which(c(het,homr,homa)==TRUE)
geno[idx]
}))
})
geno <- c("HET","HOMr","HOMa")
Q
geno <- c("HET","HOMr","HOMa")
geno_type <- apply(joint@assays$data@listData$GT[is_any_na==0,],1,function(x){
unlist(sapply(x, function(y){
al = unlist(strsplit(y,"/"))
het = al[1]!=al[2]
homa = !(grepl("0",y)) & !(het)
homr = !het & !homa
idx <- which(c(het,homr,homa)==TRUE)
print(geno[idx])
geno[idx]
}))
})
geno_type <- apply(joint@assays$data@listData$GT[is_any_na==0,],1,function(x){
translate <- unlist(sapply(x, function(y){
al = unlist(strsplit(y,"/"))
het = al[1]!=al[2]
homa = !(grepl("0",y)) & !(het)
homr = !het & !homa
idx <- which(c(het,homr,homa)==TRUE)
geno[idx]
}))
print(translate)
translate
})
Q
geno_type <- apply(joint@assays$data@listData$GT[is_any_na==0,],1,function(x){
translate <- unlist(sapply(x, function(y){
al = unlist(strsplit(y,"/"))
het = al[1]!=al[2]
homa = !(grepl("0",y)) & !(het)
homr = !het & !homa
idx <- which(c(het,homr,homa)==TRUE)
geno[idx]
}))
translate
})
head(geno_type)
dim(geno_type)
head(t(geno_type))
geno_type <- as.data.frame(t(geno_type))
joint@colData@listData
joint@colData
joint@colData$Samples
row.names(joint@colData)
names(geno_type) <- row.names(joint@colData)
geno_wide <- reshape(geno_type, direction = wide)
geno_wide <- reshape(geno_type, direction = "wide")
geno_wide <- melt(geno_type)
head(geno_wide)
geno_wide <- melt(geno_type, id.vars = 1:3)
head(geno_wide)
geno_wide <- melt(geno_type)
head(geno_wide)
geno_wide <- melt(cbind(geno_type, data.frame(dummy = "dummy"))
)
head(geno_wide)
geno_wide <- melt(cbind(geno_type, data.frame(dummy = "dummy")),id.vars = "dummy")
head(geno_wide)
ggplot(geno_wide, aes(variable, fill=value))+
geom_bar()
library(devtools)
install_github("qdapDictionaries", "trinker")
install_github("qdap", "trinker")
install_github("qdapRegex", "trinker")
install_github("qdap", "trinker")
install_github("qdap", "trinker",buil_vignettes=F)
install_github("qdap", "trinker",build_vignettes=F)
library(qdap)
names(geno_type)
dat <- list2df(list(fa = geno_type[,1], mo = geno_type[,2], p1 = geno_type[,3]), "word", "set")
trans_venn(dat$word, dat$set)
head(dat)
trans_venn(dat$word, dat$set)
library(VennDiagram)
venn.diagram(list(fa = geno_type[,1], mo = geno_type[,2], p1 = geno_type[,3]))
venn.diagram(list(fa = geno_type[,1], mo = geno_type[,2], p1 = geno_type[,3]),
NULL)
library(venneuler)
plot(geno_type)
plot(venneuler(geno_type))
plot(venneuler(geno_type))
setwd("~/repos/reproducibility/mirannotation")
data<-read.table("stats_isomirs")
head(data)
data<-read.table("stats_isomirs",read=T)
data<-read.table("stats_isomirs", header=T)
library(ggplot2)
library(reshape)
data_gg <- melt(data)
head(data_gg)
data_gg <- melt(data,id.vars = "name")
head(data_gg)
gplot(data_gg, aes(variable, fill = value)) +
geom_bar() +
theme_bw()
ggplot(data_gg, aes(variable, fill = value)) +
geom_bar() +
theme_bw()
ggplot(data_gg, aes(variable, fill = value)) +
geom_bar() +
scale_fill_brewer(palette = "Set1")
theme_bw()
setwd("~/repos/invGEX")
invname<-"HsInv92"
source("parameters.R")
positions<-read.table("/home/lpantano/projects/ibb/inputs/positions.all",header=T)
variations<-read.table("/home/lpantano/projects/ibb/inputs/gene.var.hapmap.20865155.ensembl.sum.tab",header=T,row.names=1)
gene.pos<-read.table("/home/lpantano/projects/ibb/inputs/gene.pos.all.hg18.bed",sep="\t",header=T,row.names=4)
gene.sum<-read.table("/home/lpantano/projects/ibb/inputs/gene.summary.all2.tab",sep="\t",header=T,row.names=1)
comp<-vector("list")
comp[[1]]<-c("cSTD","INV")
comp[[2]]<-c("HET","INV")
comp[[3]]<-c("cSTD","HET")
population<-c("CEUTSI","YRI")
labs<-c("CEUTSI.inv","CEUTSI.inv.het","CEUTSI.het","YRI.inv","YRI.inv.het","YRI.het")
print(invname)
list.g<-vector()
pop<-"YRI"
i<-1
gen<-paste0(comp[[i]],collapse="")
print(gen)
dse.dir<-paste(sep="",path_res,invname,"/",type,"/",pop,".DESeq2",type,".parametric/",gen,"dse")
rld.dir<-paste(sep="",path_res,invname,"/",type,"/",pop,".DESeq2",type,".parametric/",gen,"rld")
load(dse.dir)
library(DESeq2)
library(HTSFilter)
library(DEGreport)
library(BiocParallel)
dsef <- try(HTSFilter(dse, s.len=100, plot=FALSE)$filteredData,silent=T)
res<-try(results(dsef, independentFiltering=FALSE,cooksCutoff=FALSE),silent=TRUE)
class(res)=="DESeqResults"
res<-res[!is.na(res$padj),]
res.all<-as.data.frame(mcols(dse,use.names=TRUE))
sum(res$padj<=0.10,na.rm=T)
top<-as.data.frame(res[res$padj<=0.10,])
filtered<-intersect(row.names(top),row.names(res.all))
list.g<-unique(filtered)
list.g
design <- colData(dse)
c <- counts(dse, normalized =TRUE)
g1<-row.names(design[design$condition == geno[1],])
g2<-row.names(design[design$condition == geno[2],])
fc <- res[tags,"log2FoldChange"]
c <- counts(dse, normalized =TRUE)
dse
library(DESeq2)
c <- counts(dse, normalized =TRUE)
sessionInfo()
sessionInfo()
library(DESeq2)
library(HTSFilter)
library(DEGreport)
library(BiocParallel)
source("parameters.R")
positions<-read.table("/home/lpantano/projects/ibb/inputs/positions.all",header=T)
variations<-read.table("/home/lpantano/projects/ibb/inputs/gene.var.hapmap.20865155.ensembl.sum.tab",header=T,row.names=1)
gene.pos<-read.table("/home/lpantano/projects/ibb/inputs/gene.pos.all.hg18.bed",sep="\t",header=T,row.names=4)
gene.sum<-read.table("/home/lpantano/projects/ibb/inputs/gene.summary.all2.tab",sep="\t",header=T,row.names=1)
comp<-vector("list")
comp[[1]]<-c("cSTD","INV")
comp[[2]]<-c("HET","INV")
comp[[3]]<-c("cSTD","HET")
population<-c("CEUTSI","YRI")
labs<-c("CEUTSI.inv","CEUTSI.inv.het","CEUTSI.het","YRI.inv","YRI.inv.het","YRI.het")
print(invname)
invname<-"HaInv92"
i<-1
pop<-"YRI"
invname<-"HsInv92"
gen<-paste0(comp[[i]],collapse="")
print(gen)
dse.dir<-paste(sep="",path_res,invname,"/",type,"/",pop,".DESeq2",type,".parametric/",gen,"dse")
rld.dir<-paste(sep="",path_res,invname,"/",type,"/",pop,".DESeq2",type,".parametric/",gen,"rld")
load(dse.dir)
dsef <- try(HTSFilter(dse, s.len=100, plot=FALSE)$filteredData,silent=T)
res<-try(results(dsef, independentFiltering=FALSE,cooksCutoff=FALSE),silent=TRUE)
res<-res[!is.na(res$padj),]
res.all<-as.data.frame(mcols(dse,use.names=TRUE))
sum(res$padj<=0.10,na.rm=T)
top<-as.data.frame(res[res$padj<=0.10,])
filtered<-intersect(row.names(top),row.names(res.all))
list.g<-unique(filtered)
design <- colData(dse)
c <- counts(dse, normalized =TRUE)
g1<-row.names(design[design$condition == geno[1],])
geno<-comp[[i]]
tags<-list.g
g1<-row.names(design[design$condition == geno[1],])
g2<-row.names(design[design$condition == geno[2],])
fc <- res[tags,"log2FoldChange"]
pvalue <- res$pvalue
c <- c[row.names(res),]
degRank(g1,g2,c[tags,],fc)
degRank(g1,g2,c[tags,],fc,400)
setwd("~/repos/small-RNA-analysis/pipeline/code")
config<-read.table("../../fasta/config",sep="\t")
table<-read.table("../../fasta/res_october/counts.tsv",sep="\t",header=T,row.names=1)
ann<-table[,2]
names(ann)<-row.names(table)
names(table)
table<-table[,2:(ncol(table))]
library(ggtools)
library(gtools)
mixedsort(names(table))
table <- table[,mixedsort(names(table))]
get_norm_values <- function(table,con,treat,ini,end){
design<-data.frame(condition=c(rep(con,7),rep(treat,7)))
row.names(design)<-names(table)[ini:end]
mirna<-table[ini:end]
mirna<-mirna[rowSums(mirna>10)>=5,]
mirna<-mirna[!is.na(mirna[,1]),]
dds <- DESeqDataSetFromMatrix(countData = mirna,
colData = design,
design = ~ condition)
dds <- estimateSizeFactors( dds )
#summary(q)
rlogTransformation(dds, blind=TRUE)
}
library(DESeq2)
rld1 <- get_norm_values(table,"cc","ct",15,28)
dim(assay(rld))
dim(assay(rld1))
ann
head(ann)
table<-read.table("../../fasta/res_october/counts.tsv",sep="\t",header=T,row.names=1)
ann<-table[,2]
head(ann)
head(table)
ann<-table[,1]
names(ann)<-row.names(table)
table<-table[,2:(ncol(table))]
table <- table[,mixedsort(names(table))]
head(ann)
grepl("tRNA",ann)
ann[grepl("tRNA",ann)]
trna_ids <- ann[grepl("tRNA",ann)]
trna_ids <- ann[grepl("tRNA",ann) & grepl("miRNA",ann)]
trna_ids
trna_ids <- ann[grepl("tRNA",ann)]
match(row.names(assay(rld1)),trna_ids)
row.names(assay(rld1))
trna_ids <- names(ann)[grepl("tRNA",ann)]
match(row.names(assay(rld1)),trna_ids)
trna_ids
row.names(assay(rld1))
trna_ids
match(row.names(assay(rld1)),trna_ids)
trna_ids
intersect(row.names(assay(rld1)),trna_ids)
assay(rld1)[idx,]
idx <- intersect(row.names(assay(rld1)),trna_ids)
assay(rld1)[idx,]
trna_counts <- assay(rld1)[idx,]
trna_counts_clininc <- assay(rld1)[idx,]
rld1 <- get_norm_values(table,"cc","ct",1,14)
trna_ids <- names(ann)[grepl("tRNA",ann)]
idx <- intersect(row.names(assay(rld1)),trna_ids)
trna_counts_clininc <- assay(rld1)[idx,]
rld1 <- get_norm_values(table,"pc","pt",15,28)
trna_ids <- names(ann)[grepl("tRNA",ann)]
idx <- intersect(row.names(assay(rld1)),trna_ids)
trna_counts_preclininc <- assay(rld1)[idx,]
head(trna_counts_clininc)
head(trna_counts_preclininc)
counts<-setClass("DataSeq",
slots=c(counts="matrix",
normcounts="matrix",
design="data.frame"
))
do_pls<-function(counts)
{
obj<-counts()
obj@normcounts<-as.matrix(assay(counts))
obj@design<-data.frame(g=gsub("[0-9]+","",colnames(obj@normcounts)), b=1)
pls <- isoPLSDA(obj,"g",nperm = 400)
pls
}
library(isomiRs)
library(isomiR)
library(devtools)
devtools::load_all("~/repos/isomiRs")
cc_trna <- do_pls(trna_counts_clininc)
do_pls<-function(counts)
{
obj<-counts()
obj@normcounts<-as.matrix(counts)
obj@design<-data.frame(g=gsub("[0-9]+","",colnames(obj@normcounts)), b=1)
pls <- isoPLSDA(obj,"g",nperm = 400)
pls
}
cc_trna <- do_pls(trna_counts_clininc)
pc_tnra <- do_pls(trna_counts_preclininc)
trna_counts_preclininc
pc_tnra$p.val
names(table)
rld1 <- get_norm_values(table,"pc","pt",15,28)
trna_ids <- names(ann)[grepl("tRNA",ann)]
idx <- intersect(row.names(assay(rld1)),trna_ids)
trna_counts_preclininc <- assay(rld1)[idx,]
pc_tnra <- do_pls(trna_counts_preclininc)
36*17
36*18
32*18
32*19
32*20
table<-read.table("../../fasta/res_/counts.tsv",sep="\t",header=T,row.names=1)
table<-read.table("../../fasta/res_october_80//counts.tsv",sep="\t",header=T,row.names=1)
ann<-table[,1]
names(ann)<-row.names(table)
table<-table[,2:(ncol(table))]
table <- table[,mixedsort(names(table))]
rld1 <- get_norm_values(table,"pc","pt",15,28)
trna_ids <- names(ann)[grepl("tRNA",ann)]
idx <- intersect(row.names(assay(rld1)),trna_ids)
trna_counts_preclininc <- assay(rld1)[idx,]
pc_tnra <- do_pls(trna_counts_preclininc)
head(table)
get_norm_values <- function(table,con,treat,ini,end){
design<-data.frame(condition=c(rep(con,7),rep(treat,7)))
row.names(design)<-names(table)[ini:end]
mirna<-table[,ini:end]
mirna<-mirna[rowSums(mirna>10)>=5,]
mirna<-mirna[!is.na(mirna[,1]),]
dds <- DESeqDataSetFromMatrix(countData = mirna,
colData = design,
design = ~ condition)
dds <- estimateSizeFactors( dds )
#summary(q)
rlogTransformation(dds, blind=TRUE)
}
rld1 <- get_norm_values(table,"pc","pt",15,28)
trna_ids <- names(ann)[grepl("tRNA",ann)]
idx <- intersect(row.names(assay(rld1)),trna_ids)
trna_counts_preclininc <- assay(rld1)[idx,]
pc_tnra <- do_pls(trna_counts_preclininc)
head(trna_counts_preclininc)
head(table)
get_norm_values <- function(table,con,treat,ini,end){
design<-data.frame(condition=c(rep(con,7),rep(treat,7)))
row.names(design)<-names(table)[ini:end]
mirna<-table[,ini:end]
mirna<-mirna[rowSums(mirna>10)>=5,]
mirna<-mirna[!is.na(mirna[,1]),]
dds <- DESeqDataSetFromMatrix(countData = mirna,
colData = design,
design = ~ condition)
dds <- estimateSizeFactors( dds )
#summary(q)
rlogTransformation(dds, blind=FALSE)
}
rld1 <- get_norm_values(table,"pc","pt",15,28)
row.names(assay(rld1)
)
trna_ids
intersect(row.names(assay(rld1)),trna_ids)
assay(rld1)
trna_counts_preclininc <- assay(rld1)[idx,]
head(trna_counts_preclininc)
idx
do_pls(assay(rld1))
names(assay(rld1))
colnames(assay(rld1))
hist(pc_tnra$R2PermutationVector)
do_pls(assay(rld1))
get_norm_values <- function(table,con,treat,ini,end){
design<-data.frame(condition=c(rep(con,7),rep(treat,7)))
row.names(design)<-names(table)[ini:end]
mirna<-table[,ini:end]
mirna<-mirna[rowSums(mirna>10)>=5,]
dds <- DESeqDataSetFromMatrix(countData = mirna,
colData = design,
design = ~ condition)
dds <- estimateSizeFactors( dds )
#summary(q)
rlogTransformation(dds, blind=FALSE)
}
rld1 <- get_norm_values(table,"cc","ct",1,14)
do_pls(assay(rld1))
table<-read.table("../../fasta/define.cluster.Dec/res/ann.tab",sep="\t",header=T,row.names=1)
names(table)
ann<-table[,1]
names(ann)<-row.names(table)
table<-table[,2:(ncol(table))1)]
table<-table[,2:(ncol(table)-1)]
mixedsort(names(table))
table <- table[,mixedsort(names(table))]
rld1 <- get_norm_values(table,"pc","pt",15,28)
trna_ids <- names(ann)[grepl("tRNA",ann)]
idx <- intersect(row.names(assay(rld1)),trna_ids)
trna_counts_preclininc <- assay(rld1)[idx,]
pc_tnra <- do_pls(trna_counts_preclininc)
idx
head(ann[1])
ann[11]
nameS(trna_counts_preclininc)
names(trna_counts_preclininc)
colnames(trna_counts_preclininc)
rld1 <- get_norm_values(table,"cc","ct",1,14)
trna_ids <- names(ann)[grepl("tRNA",ann)]
idx <- intersect(row.names(assay(rld1)),trna_ids)
trna_counts_clininc <- assay(rld1)[idx,]
a
cc_trna <- do_pls(trna_counts_clininc)
table<-read.table("../../fasta/res_october_80_old/counts.tsv",sep="\t",header=T,row.names=1)
ann<-table[,1]
names(ann)<-row.names(table)
table<-table[,2:(ncol(table))]
table <- table[,mixedsort(names(table))]
rld1 <- get_norm_values(table,"pc","pt",15,28)
trna_ids <- names(ann)[grepl("tRNA",ann)]
idx <- intersect(row.names(assay(rld1)),trna_ids)
trna_counts_preclininc <- assay(rld1)[idx,]
pc_tnra <- do_pls(trna_counts_preclininc)
rld1 <- get_norm_values(table,"cc","ct",1,14)
trna_ids <- names(ann)[grepl("tRNA",ann)]
idx <- intersect(row.names(assay(rld1)),trna_ids)
trna_counts_clininc <- assay(rld1)[idx,]
cc_trna <- do_pls(trna_counts_clininc)
